{"project": "pyg", "project_url": "https://pyg.org", "show_commit_url": "https://github.com/pyg-team/pytorch_geometric/commit/", "hash_length": 8, "revision_to_hash": {"1084": "9eeb18d61feb56cc98cd81e46af2270d768d53f1", "1152": "8313ae159dcd50e49690e60badae2330c32cfb2b", "1209": "964530024bbeb52a9bb014a60f29b499e646cad9", "1341": "c99e0ea85064779219084f68b515150c7f3bb8a4", "1478": "7b3f16b4bbf9bf9560a4fd25095fbab6810ac790", "1489": "253bd1457110ec0030aa7f6ede30f2fcec9fc494", "1571": "636dbc48d264cc3e75eda3f5d7947e815ffbd907", "1719": "6de2a1bc9c56060ef5afb6e4ba06c8cce86a2269", "1730": "e4589bac6e710b18496f1e0b750c5ed4446fe50a", "1750": "751a411ee9d7f396ca070c19f948a72d78e97089", "1888": "d5aff37604c8e3247f5e807f2ba0ec6eeb4c661b", "1985": "0b2a01c2bfd255b17f15657578ab9bf143212973", "2294": "5c2399d06cfb921f3168ced69a1406746a2a2447", "2515": "58ff9037e4c3dd4653aa37a387c03a37a8f0d546", "2551": "881d5ba2aefc26328eeeaa17fd7ef6daaae06ef4", "2707": "a83d38dbd0e51599139fb86af2371aef4c3ad4ca", "2727": "5bb5db9e105e6531ac4da22f2674f5614e2d1732", "2846": "9ad551ff68dd1172d140973598c90d696aa7e152", "3102": "cc071b7c4bd632ace8919a81d7049b984e09f0ba", "3608": "31dca649cca1c329efa98ef608953538ddff7b74", "3687": "df0612bca76b14464b13c86759eec0c56ebc8154", "3941": "c57eb7d60d672462ac3eaa6476c2f5fe78dc9f3c", "3955": "4b531e5168555c5c2600cc616a21aa050306efb4", "4361": "e6b8d6427ad930c6117298006d7eebea0a37ceac", "4777": "d86de00a98173653a6158fc40238d34d0fb57cc1", "4827": "5455b528d58e7d5b57f0046313065c160c4d4caa", "5009": "c5152eae0de1bfaec1b60a7f931e0c928bb6df3c", "5023": "82a3bab57e4d5b8695e546e56536bee37545642e", "5144": "101ed2cb5cc15344f41dc2f062b5284d8327dece", "5309": "d47d9cde477e1ab25821178968538eddeabc351a", "5518": "97d55577f1d0bf33c1bfbe0ef864923ad5cb844d", "5856": "07bf02f6bd871d3e1571a995ec53da461c11a11c", "6316": "ca4e5f8e308cf4ee7a221cb0979bb12d9e37a318", "7307": "dd0610a95935a4d8b00974464251190356084118", "7494": "ff9fb3d7cdbaa2f2b8a848fb6cc5f4c3f465118c", "7770": "0f0e0da31d2f2848d7f0bb77e9ffcf1911d5482f", "7777": "aed0b6bc0f102c3af5b600195709df96c16f3333"}, "revision_to_date": {"1084": 1527237156000, "1152": 1534165740000, "1209": 1540007891000, "1341": 1545136515000, "1478": 1547578922000, "1489": 1548423127000, "1571": 1551978830000, "1719": 1554100892000, "1730": 1554182914000, "1750": 1554441998000, "1888": 1556522735000, "1985": 1558511934000, "2294": 1561817893000, "2515": 1567064345000, "2551": 1570176475000, "2707": 1580817773000, "2727": 1582039081000, "2846": 1584467720000, "3102": 1590382943000, "3608": 1594103054000, "3687": 1596633598000, "3941": 1606460050000, "3955": 1606920803000, "4361": 1617954430000, "4777": 1623915629000, "4827": 1624695909000, "5009": 1631516432000, "5023": 1631774083000, "5144": 1635246629000, "5309": 1640155409000, "5518": 1647084760000, "5856": 1660732188000, "6316": 1669877069000, "7307": 1679559864000, "7494": 1680252540000, "7770": 1686059335000, "7777": 1685979157000}, "params": {"arch": ["x86_64"], "cpu": ["Intel(R) Xeon(R) CPU E5-2690 v4 @ 2.60GHz"], "machine": ["codespaces-v100"], "num_cpu": ["6"], "os": ["Linux 5.15.0-1038-azure"], "ram": ["115403744"], "python": ["3.11"], "branch": ["HEAD"]}, "graph_param_list": [{"arch": "x86_64", "cpu": "Intel(R) Xeon(R) CPU E5-2690 v4 @ 2.60GHz", "machine": "codespaces-v100", "num_cpu": "6", "os": "Linux 5.15.0-1038-azure", "ram": "115403744", "python": "3.11", "branch": "HEAD"}], "benchmarks": {"import.Import.timeraw_import": {"code": "class Import:\n    def timeraw_import(self):\n        return \"import torch_geometric\"", "min_run_count": 2, "name": "import.Import.timeraw_import", "number": 1, "param_names": [], "params": [], "repeat": 0, "rounds": 1, "sample_time": 0.01, "timeout": 60.0, "type": "time", "unit": "seconds", "version": "c2b5fc8c6e18b51e356434a3c7e2fdf7b2acf11a46a24fbf26e84365ab1dc22f", "warmup_time": -1}, "scatter.Scatter.track_optimized_scatter": {"code": "class Scatter:\n    def track_optimized_scatter(self, ts):\n        return ts[2][1]\n\n    def setup(self, n):\n        if not WITH_TORCH_SCATTER:\n            raise NotImplementedError\n\n    def setup_cache(self):\n        device = \"cuda\" if torch.cuda.is_available() else \"cpu\"\n        num_nodes, num_edges = 1_000, 50_000\n        x = torch.randn(num_edges, 64, device=device)\n        index = torch.randint(num_nodes, (num_edges,), device=device)\n        ts = benchmark(\n            funcs=[pytorch_scatter, own_scatter, optimized_scatter],\n            func_names=[\"PyTorch\", \"torch_scatter\", \"Optimized\"],\n            args=(x, index, num_nodes, \"sum\"),\n            num_steps=100 if device == \"cpu\" else 1000,\n            num_warmups=50 if device == \"cpu\" else 500,\n        )\n        return ts", "name": "scatter.Scatter.track_optimized_scatter", "param_names": [], "params": [], "setup_cache_key": "scatter:57", "timeout": 60.0, "type": "track", "unit": "unit", "version": "8f28720160476ebab31c220e5957f9f65fc0f4df570822863d21fa301210344c"}, "scatter.Scatter.track_own_scatter": {"code": "class Scatter:\n    def track_own_scatter(self, ts):\n        return ts[1][1]\n\n    def setup(self, n):\n        if not WITH_TORCH_SCATTER:\n            raise NotImplementedError\n\n    def setup_cache(self):\n        device = \"cuda\" if torch.cuda.is_available() else \"cpu\"\n        num_nodes, num_edges = 1_000, 50_000\n        x = torch.randn(num_edges, 64, device=device)\n        index = torch.randint(num_nodes, (num_edges,), device=device)\n        ts = benchmark(\n            funcs=[pytorch_scatter, own_scatter, optimized_scatter],\n            func_names=[\"PyTorch\", \"torch_scatter\", \"Optimized\"],\n            args=(x, index, num_nodes, \"sum\"),\n            num_steps=100 if device == \"cpu\" else 1000,\n            num_warmups=50 if device == \"cpu\" else 500,\n        )\n        return ts", "name": "scatter.Scatter.track_own_scatter", "param_names": [], "params": [], "setup_cache_key": "scatter:57", "timeout": 60.0, "type": "track", "unit": "unit", "version": "4799c3347330dddabbe889fb5d4da0edcd3ea538e634717f561931c75caed010"}, "scatter.Scatter.track_pytorch_scatter": {"code": "class Scatter:\n    def track_pytorch_scatter(self, ts):\n        return ts[0][1]\n\n    def setup(self, n):\n        if not WITH_TORCH_SCATTER:\n            raise NotImplementedError\n\n    def setup_cache(self):\n        device = \"cuda\" if torch.cuda.is_available() else \"cpu\"\n        num_nodes, num_edges = 1_000, 50_000\n        x = torch.randn(num_edges, 64, device=device)\n        index = torch.randint(num_nodes, (num_edges,), device=device)\n        ts = benchmark(\n            funcs=[pytorch_scatter, own_scatter, optimized_scatter],\n            func_names=[\"PyTorch\", \"torch_scatter\", \"Optimized\"],\n            args=(x, index, num_nodes, \"sum\"),\n            num_steps=100 if device == \"cpu\" else 1000,\n            num_warmups=50 if device == \"cpu\" else 500,\n        )\n        return ts", "name": "scatter.Scatter.track_pytorch_scatter", "param_names": [], "params": [], "setup_cache_key": "scatter:57", "timeout": 60.0, "type": "track", "unit": "unit", "version": "552b653f8b3a4a7988a622182be576b67547c94f3008fdccb37adacb13b115cd"}}, "machines": {"codespaces-v100": {"arch": "x86_64", "cpu": "Intel(R) Xeon(R) CPU E5-2690 v4 @ 2.60GHz", "machine": "codespaces-v100", "num_cpu": "6", "os": "Linux 5.15.0-1038-azure", "ram": "115403744", "version": 1}}, "tags": {"0.1.1": 1084, "0.3.0": 1152, "0.3.1": 1209, "1.0.0": 1341, "1.0.1": 1478, "1.0.2": 1489, "1.0.3": 1571, "1.1.0": 1719, "1.1.1": 1730, "1.1.2": 1750, "1.2.0": 1888, "1.2.1": 1985, "1.3.0": 2294, "1.3.1": 2515, "1.3.2": 2551, "1.4.1": 2707, "1.4.2": 2727, "1.4.3": 2846, "1.5.0": 3102, "1.6.0": 3608, "1.6.1": 3687, "1.6.2": 3941, "1.6.3": 3955, "1.7.0": 4361, "1.7.1": 4777, "1.7.2": 4827, "2.0.0": 5009, "2.0.1": 5023, "2.0.2": 5144, "2.0.3": 5309, "2.0.4": 5518, "2.1.0": 5856, "2.2.0": 6316, "2.3.0": 7307, "2.3.1": 7494}, "pages": [["", "Grid view", "Display as a agrid"], ["summarylist", "List view", "Display as a list"], ["regressions", "Show regressions", "Display information about recent regressions"]]}